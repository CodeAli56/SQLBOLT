                            CHAPTER 1

Q1  Find the title of each film.
    SELECT title FROM movies;

Q2. Find director of each film.
    SELECT director FROM movies;

Q3. Find the title and director of each film.
    SELECT title, director FROM movies;

Q4. Find the title and year of each film.
    SELECT title, year FROM movies;

Q5. Find all the information of each film.
    SELECT * FROM movies;


                            CHAPTER 2

Q6. Find the movie with row id of 6.
    SELECT * FROM movies where id = 6;

Q7. Find the movies with the release year between 2000 and 2010.
    SELECT * FROM movies where year between 2000 and 2010;

Q8. Find the movies not released in year between 2000 and 2010.
    SELECT * from movies where year not between 2000 and 2010;

Q9. Find the first 5 movies and their release year.
    SELECT * from movies order by year asc limit 5;


                            CHAPTER 3
                        
Q10. Find all the Toy Story movies.
    SELECT * FROM movies where title like "Toy Story%" ;

Q11. Find all the movies directed by John Lasseter.
    SELECT * FROM movies where director = "John Lasseter" ;         #can use both like and = here

Q12. Find all the movies not directed by John Lasseter.
    SELECT * FROM movies where director not like "John Lasseter" ;  #can use both not like and <> here

Q13. Find all the Wall-* movies.
    SELECT * FROM movies where title like "Wall-%" ;


                            CHAPTER 4
                        
Q14. List all directors name alphabetically without duplicates.
    SELECT distinct(director) FROM movies order by director asc;

Q15. List the last four movies released.
    SELECT * FROM movies order by year desc limit 4 ;

Q16. List the first five movies sorted alphabetically.
    SELECT * FROM movies order by title asc limit 5 ;

Q17. List the next five movies sorted alphabetically.
    SELECT * FROM movies order by title asc limit 5 offset 5;


                            CHAPTER 5

Q18. List all the canadian cities and their population.
    SELECT city, population FROM north_american_cities where country= "Canada";

Q19. Order all the cities in United states by their latitude from north to south.
    SELECT * FROM north_american_cities 
    where country = 'United States' 
    order by latitude desc ;

Q20. List all the cities west of Chicago, ordered from west to east.
    SELECT * FROM north_american_cities 
    where longitude < -88 
    order by longitude asc ;

Q21. List the two largest city of Mexico by population.
    SELECT * FROM north_american_cities
    where country = "Mexico"
    order by population desc
    limit 2 ;

Q22. List the 3rd and 4th largest city in United States by population.
    SELECT * FROM north_american_cities
    where country = "United States"
    order by population desc
    limit 2 offset 2 ;


                            CHAPTER 6

Q23. Find the domestic and international sales for each movie.
    SELECT 
        m.title, b.Domestic_sales, b.International_sales 
    FROM 
    movies m left join Boxoffice b 
    on m.id = b.movie_id ;

Q24. Show the sales number of such movies which did better in international than in domestic.
    SELECT
        m.title, b.international_sales, b.domestic_sales
    from 
    Movies m left join Boxoffice b
    on m.id = b.movie_id
    where b.international_sales > b.domestic_sales ;

Q25. List all the movies by their rating in descending order.
    SELECT
        m.title, b.rating
    from 
    Movies m left join Boxoffice b
    on m.id = b.movie_id
    order by b.rating desc ;


                                CHAPTER 7

Q26. Find the list all the buildings that have employees.
    SELECT
        distinct(b.building_name)
    FROM
    buildings b left join employees e
    on b.building_name = e.building
    where e.name is not null ;

Q27. Find the list of all buildings with their capacity.
    SELECT * FROM buildings;

Q28. List all buildings and distinct employee roles in each building.
    select
        distinct b.building_name, e.role
    from 
    buildings b left join employees e
    on b.building_name = e.building ;


                                CHAPTER 8

Q29. Find the name and role of employees who have not been assigned any building to them.
    SELECT * from employees where building is null ;

Q30. Find the name of the building that hold no employees.
    SELECT 
        b.building_name 
    FROM 
    buildings b left join employees e
    on b.building_name = e.building
    where e.name is null ;


                                CHAPTER 9

Q31. List all movies and their combined sales in millions.
    SELECT 
        m.title, (b.domestic_sales + b.international_sales) / 1000000 as TotalSales
    FROM 
    movies m left join boxoffice b
    on m.id = b.movie_id

Q32. List all the movies and their rating in percent.
    SELECT 
        m.title, round(b.rating * 100 / 10, 2) as RatingPercent
    FROM 
    movies m left join boxoffice b
    on m.id = b.movie_id

Q33. List all the movies that were released in even number years.
    SELECT title from movies where year % 2 = 0 ;


                                CHAPTER 10

Q34. Find the longest time that an employee have been at the studio.
    SELECT max(years_employed) FROM employees ;

Q35. For each role, find the average number of years employed by employees in that role.
    SELECT role, avg(years_employed) FROM employees group by role;

Q36. Find the total number of employee years worked in each building.
    SELECT building, sum(years_employed) FROM employees group by building ;


                                CHAPTER 11

Q37. Find the number of Artists in the studio without using HAVING clause.
    SELECT count(*) FROM employees where role = "Artist";

Q38. Find the number of employee of each role in the studio.
    SELECT role, count(*) FROM employees group by role;

Q39. Find the total number of years employed by all engineers.
    SELECT role, sum(years_employed) FROM employees group by role having role="Engineer";

    SELECT sum(years_employed) FROM employees where role="Engineer";


                                CHAPTER 12

Q40. Find the number of movies each director has directed.
    SELECT director, count(director) FROM movies group by director;

Q41. Find the total domestic and international sales that can be attributed to each director.
    SELECT
        m.director, ( sum(b.domestic_sales) + sum(b.international_sales) ) as TotalSales
    from movies m left join boxoffice b 
    on m.id = b.movie_id
    group by director ;


                                CHAPTER 13

Q42. Add the studio's new production, Toy Story 4 to the list with any director.
    insert into movies values (5,'Toy Story 4', 'John Lasseter',2000,90)

Q43. Toy story 4 had been released with rating 8.7 and made 340mn domestically and 270mn internationally. Add this to boxoffice record.
    insert into boxoffice values (5, 8.7, 340000000, 270000000)


fdsfsdgf